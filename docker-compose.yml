version: '3'
services:
  auth:
    build: .
    working_dir: /auth_service
    command: bash -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./auth_service:/auth_service
    ports:
      - "8001:8000"
    depends_on:
      - kafka

  task:
    build: .
    working_dir: /task_service
    command: bash -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./task_service:/task_service
    ports:
      - "8002:8000"
    depends_on:
      - kafka

  accounting:
    build: .
    working_dir: /accounting_service
    command: bash -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./accounting_service:/accounting_service
    ports:
      - "8003:8000"
    depends_on:
      - kafka

  analytics:
    build: .
    working_dir: /analytics_service
    command: bash -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./analytics_service:/analytics_service
    ports:
      - "8004:8000"
    depends_on:
      - kafka

  kafka:
    image: bitnami/kafka
    command: "mkdir -p /bitnami/kafka"
    environment:
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      - KAFKA_CFG_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_KRAFT_CLUSTER_ID=r4zt_wrqTRuT7W2NJsB_GA
      - BITNAMI_DEBUG=yes
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1

  kafka-ui:
    image: 'provectuslabs/kafka-ui:latest'
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_NAME=r4zt_wrqTRuT7W2NJsB_GA
    depends_on:
      - kafka

  redis:
    restart: on-failure
    image: "redis:alpine"

  task_celery:
    restart: on-failure
    build: .
    working_dir: /popug_area/task_service
    command: bash -c "celery -A task_service worker --loglevel=INFO"
    environment:
      DJANGO_SETTINGS_MODULE: 'task_service.settings'
    depends_on:
      - kafka
    volumes:
      - ./task_service:/popug_area/task_service

  accounting_celery:
    restart: on-failure
    build: .
    working_dir: /popug_area/accounting_service
    command: bash -c "celery -A accounting_service worker -P solo --loglevel=INFO"
    environment:
      DJANGO_SETTINGS_MODULE: 'accounting_service.settings'
    depends_on:
      - kafka
    volumes:
      - ./accounting_service:/popug_area/accounting_service

  accounting_celery_beat:
    restart: on-failure
    build: .
    working_dir: /popug_area/accounting_service
    command: bash -c "celery -A accounting_service beat"
    environment:
      DJANGO_SETTINGS_MODULE: 'accounting_service.settings'
    depends_on:
      - kafka
    volumes:
      - ./accounting_service:/popug_area/accounting_service

  analytics_celery:
    restart: on-failure
    build: .
    working_dir: /popug_area/analytics_service
    command: bash -c "celery -A analytic_service worker --loglevel=INFO"
    environment:
      DJANGO_SETTINGS_MODULE: 'analytic_service.settings'
    depends_on:
      - kafka
    volumes:
      - ./analytics_service:/popug_area/analytics_service

  task_consumer:
    build: .
    restart: always
    working_dir: /task_service
    command: python manage.py runconsumer
    volumes:
      - ./task_service:/task_service
    depends_on:
      - kafka

  accounting_consumer:
    build: .
    restart: always
    working_dir: /accounting_service
    command: python manage.py runconsumer
    volumes:
      - ./accounting_service:/accounting_service
    depends_on:
      - kafka

  analytics_consumer:
    build: .
    restart: always
    working_dir: /analytics_service
    command: python manage.py runconsumer
    volumes:
      - ./analytics_service:/analytics_service
    depends_on:
      - kafka
