version: '3'
services:
  auth:
    build: .
    working_dir: /auth_service
    command: bash -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./auth_service:/auth_service
    ports:
      - "8001:8000"
    depends_on:
      kafka:
        condition: service_healthy

  task:
    build: .
    working_dir: /task_service
    command: bash -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./task_service:/task_service
    ports:
      - "8002:8000"
    depends_on:
      kafka:
        condition: service_healthy

  accounting:
    build: .
    working_dir: /accounting_service
    command: bash -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./accounting_service:/accounting_service
    ports:
      - "8003:8000"
    depends_on:
      kafka:
        condition: service_healthy

  analytics:
    build: .
    working_dir: /analytics_service
    command: bash -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./analytics_service:/analytics_service
    ports:
      - "8004:8000"
    depends_on:
      kafka:
        condition: service_healthy

  kafka:
    image: confluentinc/confluent-local:latest
    restart: on-failure
    ports:
      - "8082:8082"
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://localhost:9092'
    healthcheck:
      test: kafka-topics --bootstrap-server kafka:29092 --list
      interval: 15s
      timeout: 10s
      retries: 5

  init-kafka:
    image: confluentinc/confluent-local:latest
    restart: on-failure
    command: >
      bash -c "
      kafka-topics --bootstrap-server kafka:29092 --list
      && echo -e 'Creating kafka topics'
      && kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic user-stream --replication-factor 1 --partitions 1
      && kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic account-stream --replication-factor 1 --partitions 1
      && kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic transaction-stream --replication-factor 1 --partitions 1
      && kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic task-lifecycle --replication-factor 1 --partitions 1
      && echo -e 'Successfully created the following topics:'
      && kafka-topics --bootstrap-server kafka:29092 --list
      "
    depends_on:
      kafka:
        condition: service_healthy

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "9999:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: true
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    depends_on:
      kafka:
        condition: service_healthy

  redis:
    restart: on-failure
    image: "redis:alpine"

  task_celery:
    restart: on-failure
    build: .
    working_dir: /popug_area/task_service
    command: bash -c "celery -A task_service worker --loglevel=DEBUG -E"
#    environment:
#      DJANGO_SETTINGS_MODULE: 'task_service.settings'
    volumes:
      - ./task_service:/popug_area/task_service
    depends_on:
      kafka:
        condition: service_healthy

  accounting_celery:
    restart: on-failure
    build: .
    working_dir: /popug_area/accounting_service
    command: bash -c "celery -A accounting_service worker -P solo --loglevel=INFO"
#    environment:
#      DJANGO_SETTINGS_MODULE: 'accounting_service.settings'
    volumes:
      - ./accounting_service:/popug_area/accounting_service
    depends_on:
      kafka:
        condition: service_healthy

  accounting_celery_beat:
    restart: on-failure
    build: .
    working_dir: /popug_area/accounting_service
    command: bash -c "celery -A accounting_service beat"
#    environment:
#      DJANGO_SETTINGS_MODULE: 'accounting_service.settings'
    volumes:
      - ./accounting_service:/popug_area/accounting_service
    depends_on:
      kafka:
        condition: service_healthy

  analytics_celery:
    restart: on-failure
    build: .
    working_dir: /popug_area/analytics_service
    command: bash -c "celery -A analytic_service worker --loglevel=INFO"
    environment:
      DJANGO_SETTINGS_MODULE: 'analytic_service.settings'
    volumes:
      - ./analytics_service:/popug_area/analytics_service
    depends_on:
      kafka:
        condition: service_healthy

  task_consumer:
    build: .
    restart: always
    working_dir: /task_service
    command: python manage.py runconsumer
    volumes:
      - ./task_service:/task_service
    depends_on:
      kafka:
        condition: service_healthy

  accounting_consumer:
    build: .
    restart: always
    working_dir: /accounting_service
    command: python manage.py runconsumer
    volumes:
      - ./accounting_service:/accounting_service
    depends_on:
      kafka:
        condition: service_healthy

  analytics_consumer:
    build: .
    restart: always
    working_dir: /analytics_service
    command: python manage.py runconsumer
    volumes:
      - ./analytics_service:/analytics_service
    depends_on:
      kafka:
        condition: service_healthy
